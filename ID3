package com.ID3;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import com.utils.Utils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.XMLWriter;



public class DecisionTree {


    public static int  createTree(ArrayList<ArrayList<String>> dataSet,ArrayList<String> featureList,Element e){
        ArrayList<String> labelList=Utils.getClassList(dataSet);//获取数据集中label的列表
        if(Utils.arrayToMap(labelList).size()==1){//表示label中只有一种类别，所以此时不需要再分类了
            e.addText(labelList.get(0));
            return 1;
        }
        if(dataSet.get(0).size()==1){//表示此时已经没有特征了，所以也不需要再继续了，此时以label中最多的类别为该节点的类别
            e.addText(Utils.major(labelList));
            return 1;
        }

        ArrayList<String> subFeatureList=Utils.copyArrayList(featureList);



        String feature=Utils.bestFeatureSplitID3(dataSet,featureList);
        subFeatureList.remove(feature);
        int index=featureList.indexOf(feature);

        Set<String> valueSet=Utils.getValueFromDataSet(dataSet,index);
//        Element next=e.addElement(feature);//原来的代码位置
        for(String value:valueSet){
            Element next=e.addElement(feature);//后来放到这里之后，xml的输出就正确了,原因在于每递归一次就需要创建一个element，所以应该在for内创建。
            next.addAttribute("value",value);
            ArrayList<ArrayList<String>> subDataSet=Utils.splitDataSet(dataSet,index,value);
            createTree(subDataSet,subFeatureList,next);
        }
        return 1;
    }

    public static void main(String[] args) throws Exception{
        // TODO Auto-generated method stub
        String file="C:\\Users\\tomorrow\\Desktop\\dataset\\Car Evaluation Data Set\\car.data.txt";
        String xml="dataID3.xml";
        run(file,xml);
    }
    private static void run(String file,String xml) throws IOException {
        File f=new File(file);
        if(!f.exists()){
            System.out.println("源数据文件不存在");
            return ;
        }
        ArrayList<ArrayList<String>> dataSet=Utils.loadDataSet(file);
        ArrayList<String> featureList=Utils.loadFeature(file);
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement("DecisionTree");
        createTree(dataSet,featureList,root);
        XMLWriter writer=new XMLWriter(new FileWriter(new File(f.getParentFile(),xml)));
        writer.write(document);
        writer.close();
        System.out.println("finished");
    }

}
